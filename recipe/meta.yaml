{% set name = "nest-simulator" %}
{% set version = "2.20.0" %}

{% set build = 6 %}

# mpi must be defined for conda-smithy lint
{% set mpi = mpi or 'nompi' %}

{% if mpi == 'nompi' %}
# prefer nompi builds via a build number offset
{% set build = build + 100 %}
{% endif %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/nest/{{ name }}/archive/v{{ version }}.tar.gz
  sha256: 40e33187c22d6e843d80095b221fa7fd5ebe4dbc0116765a91fc5c425dd0eca4
  patches:
    - source/patches/changes_py38.patch

build:
  number: {{ build }}
  {% if mpi != 'nompi' %}
  {% set mpi_prefix = "mpi_" + mpi %}
  {% else %}
  {% set mpi_prefix = "nompi" %}
  {% endif %}
  # add build string so packages can depend on
  # mpi or nompi variants
  # dependencies:
  # mpi_*` for any mpi
  # nompi_*` for no mpi
  # examle see;
  # https://github.com/conda-forge/h5py-feedstock/blob/master/recipe/meta.yaml
  string: "{{ mpi_prefix }}_py{{ py }}h{{ PKG_HASH }}_{{ build }}"
  skip: true  # [win or py<30]
  # osx_is_app: True

requirements:
  build:
    - cmake >=3.6
    # - git
    - llvm-openmp  # [osx]
    - make
    - openmp  # [linux][mpi != 'nompi']
    # - sed
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
  host:
    - boost-cpp
    - boost
    - cython
    - gsl
    - {{ pin_compatible('libcblas') }}
    - libtool
    - llvm-openmp  # [osx]
    # - matplotlib
    - {{ pin_compatible('ncurses') }}
    # - {{ pin_compatible('numpy') }}
    - {{ mpi }}  # [mpi != 'nompi']
    - mpi4py  # [mpi != 'nompi']
    - openmp  # [linux][mpi != 'nompi']
    - python
    - readline
    - scipy
    - openssh
    - statsmodels
    - zlib
  run:
    - boost-cpp
    - boost
    - cython
    - gsl
    - {{ pin_compatible('libcblas') }}
    - libtool
    - llvm-openmp  # [osx]
    # - matplotlib
    - {{ pin_compatible('ncurses') }}
    # - {{ pin_compatible('numpy') }}
    - {{ mpi }}  # [mpi != 'nompi']
    - mpi4py  # [mpi != 'nompi']
    - openmp  # [linux][mpi != 'nompi']
    - python
    - python.app  # [osx]
    - readline
    - scipy
    - statsmodels
    - openssh
    - zlib

test:
  imports:
    - nest
  commands:
    - nest --help
    - sli --help

about:
  home: http://www.nest-simulator.org/
  license:  GPL-2.0
  license_family: GPL
  license_file: LICENSE
  summary: |
    NEST is a simulator for spiking neural network models that focuses on the dynamics, size and structure of neural
    systems rather than on the exact morphology of individual neurons.
  description: |
    You can use NEST either as a for the interpreted programming language Python (PyNEST) or as a stand alone
    application (nest). PyNEST provides a set of commands to the Python interpreter which give you access to NEST's
    simulation kernel. With these commands, you describe and run your network simulation. You can also complement
    PyNEST with PyNN, a simulator-independent set of Python commands to formulate and run neural simulations. While
    you define your simulations in Python, the actual simulation is executed within NEST's highly optimized
    simulation kernel which is written in C++. A NEST simulation tries to follow the logic of an
    electrophysiological experiment that takes place inside a computer with the difference, that the neural system
    to be investigated must be defined by the experimenter. The neural system is defined by a possibly large number
    of neurons and their connections. In a NEST network, different neuron and synapse models can coexist. Any two
    neurons can have multiple connections with different properties. Thus, the connectivity can in general not
    be described by a weight or connectivity matrix but rather as an adjacency list. To manipulate or observe the
    network dynamics, the experimenter can define so-called devices which represent the various instruments (for
    measuring and stimulation) found in an experiment. These devices write their data either to memory or to file.
    NEST is extensible and new models for neurons, synapses, and devices can be added. To get started with NEST,
    please see the documentation page <https://nest-simulator.org/documentation/>.
  doc_url: https://nest-simulator.readthedocs.io/en/latest/
  dev_url: https://github.com/nest/nest-simulator

extra:
  recipe-maintainers:
    - steffengraber
